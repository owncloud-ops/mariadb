#!/usr/bin/env bash

# GPL-2.0 License
# Source: https://github.com/MariaDB/mariadb-docker/blob/master/10.6/healthcheck.sh

set -eo pipefail

_process_sql() {
    local args=()

    if [[ -n "${MARIADB_ROOT_PASSWORD}" ]]; then
        args+=(
            --host localhost
            --protocol tcp
            --user=root
            --password="${MARIADB_ROOT_PASSWORD}"
        )
    fi

    mariadb -B "$@"
}

# TESTS

# CONNECT
#
# Tests that a connection can be made over TCP, the final state
# of the entrypoint and is listening. The authentication used
# isn't tested.
connect() {
    set +e +o pipefail
    local args=(
        --host localhost
        --protocol tcp
    )

    if [[ -n "${MARIADB_ROOT_PASSWORD}" ]]; then
        args+=(
            --user=root
            --password="${MARIADB_ROOT_PASSWORD}"
        )
    fi

    mariadb "${args[@]}" -e 'select 1' 2>&1 | grep -qF "Can't connect"
    local ret=${PIPESTATUS[1]}
    set -eo pipefail
    if (("$ret" == 0)); then
        # grep Matched "Can't connect" so we fail
        return 1
    fi
    return 0
}

# INNODB_INITIALIZED
#
# This tests that the crash recovery of InnoDB has completed
# along with all the other things required to make it to a healthy
# operational state. Note this may return true in the early
# states of initialization. Use with a connect test to avoid
# these false positives.
innodb_initialized() {
    local s
    s=$(_process_sql --skip-column-names -e 'select 1 from information_schema.ENGINES WHERE engine="innodb" AND support in ("YES", "DEFAULT", "ENABLED")')
    [ "$s" == 1 ]
}

# INNODB_BUFFER_POOL_LOADED
#
# Tests the load of the innodb buffer pool as been complete
# implies innodb_buffer_pool_load_at_startup=1 (default), or if
# manually SET innodb_buffer_pool_load_now=1
innodb_buffer_pool_loaded() {
    local s
    s=$(_process_sql --skip-column-names -e 'select VARIABLE_VALUE from information_schema.GLOBAL_STATUS WHERE VARIABLE_NAME="Innodb_buffer_pool_load_status"')
    if [[ $s =~ 'load completed' ]]; then
        return 0
    fi
    return 1
}

# mariadbupgrade
#
# Test the lock on the file /var/lib/mysql_upgrade_info
# https://jira.mariadb.org/browse/MDEV-27068
mariadbupgrade() {
    local f="$DATADIR/mysql_upgrade_info"
    if [ -r "$f" ]; then
        flock --exclusive --nonblock -n 9 9<"$f"
        return $?
    fi
    return 0
}

# MAIN

if [ $# -eq 0 ]; then
    echo "At least one argument required" >&2
    exit 1
fi

DATADIR=/var/lib/mysql

_test_exists() {
    declare -F "$1" >/dev/null
    return $?
}

while [ $# -gt 0 ]; do
    case "$1" in
    --*)
        test=${1#--}
        ;;
    *)
        echo "Unknown healthcheck option $1" >&2
        exit 1
        ;;
    esac
    if [ -n "$test" ]; then
        if ! _test_exists "$test"; then
            echo "healthcheck unknown option or test '$test'" >&2
            exit 1
        elif ! "$test"; then
            echo "healthcheck $test failed" >&2
            exit 1
        fi
        test=
    fi
    shift
done
